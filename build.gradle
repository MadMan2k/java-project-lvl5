plugins {
	id 'application'
	id 'checkstyle'
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.liquibase.gradle' version '2.0.4'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'

application {
	mainClass = 'hexlet.code.app.AppApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.22'

	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
	annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
	annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.liquibase:liquibase-core:4.6.1'
	implementation 'com.querydsl:querydsl-core:5.0.0'

	liquibaseRuntime sourceSets.main.output
	liquibaseRuntime 'org.liquibase:liquibase-core:4.6.1'
	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.5.0'

	runtimeOnly 'com.h2database:h2:1.4.200'
	runtimeOnly 'org.postgresql:postgresql:42.2.24'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test:5.5.1'
}

wrapper {
	gradleVersion = '7.3'
	distributionType = Wrapper.DistributionType.ALL
}

compileJava {
	options.release = 16
	options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
}

// Настраиваем таску diffChangeLog таким образом,
// чтобы миграции учитывали изменения в моделях
diffChangeLog {
	dependsOn compileJava
}

// Настраиваем Liquibase
liquibase {
	activities {
		main {
			// Указываем путь, по которому будет сгенерирован файл миграции
			changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
			// Указывем источник, с которым будут сравниваться изменения
			// Это база данных, изначально она пустая
			url 'jdbc:h2:./testDB'
			// Имя пользователя и пароль для подключения к базе
			username 'sa'
			password 'sa'
			// Сравниваем с моделями, задавая пакет
			referenceUrl 'hibernate:spring:hexlet.code.app.entity.' +
					// Указываем диалект
					'?dialect=org.hibernate.dialect.H2Dialect' +
					// Указываем правила именования таблиц и столбцов,
					// чтобы они соответствовали правилам Spring
					'&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
		}
	}
}

// Таска нужная heroku для деплоя
task stage(dependsOn: [clean, installDist])
installDist.mustRunAfter clean
